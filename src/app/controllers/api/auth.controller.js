"use strict";

const validator = require("validator");
const jwt = require("jsonwebtoken");
const User = require("../../models/user.model");
const nodemailer = require("nodemailer");
const { google } = require("googleapis");


const AuthController = function () {

}

// [POST] /api/auth/login
AuthController.prototype.login = async function (req, res, next) {

  const loggedUser = req.body;

  // validate
  let errs = [];

  if (!loggedUser.account && !loggedUser.password) {
    errs.push("very bad request!!");
  }


  // check find user or not
  const foundUser = await User.findOne({
    $or: [
      {
        email: loggedUser.account,
      },
      {
        phone: loggedUser.account,
      },
    ]
  });
  if (!foundUser) {
    res.status(400).json({ errors: ["t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!"] });
    return;
  }

  // check password
  if (!foundUser.compare(loggedUser.password)) {
    errs.push("t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c!");
  }

  if (errs.length) {
    res.status(400).json({ errors: errs });
    return;
  }

  // create token
  const token = jwt.sign({
    _id: foundUser._id,
    role: foundUser.role,
    name: foundUser.name,
    avatar: foundUser.avatar,
  }, process.env.SECRET_KEY || "DevSecretKey", { expiresIn: '1d' });

  res.header("auth_token", token).cookie('auth_token', token, { expires: new Date(Date.now() + 86400000), }).status(200).json({ "auth_token": token });


}

// [POST] /api/auth/register
AuthController.prototype.register = async function (req, res, next) {

  const newUser = new User(req.body);

  // validate
  let errs = [];

  // check is email
  if (!newUser.email || validator.isEmpty(newUser.email)) {
    errs.push("email l√† tr∆∞·ªùng b·∫Øt bu·ªôc!");
  }
  if (!newUser.email || !validator.isEmail(newUser.email)) {
    errs.push("email c√≥ ƒë·ªãnh d·∫°ng sai!");
  }
  // check phone
  const VNPhoneRegex = /(84|0[3|5|7|8|9])+([0-9]{8})\b/;
  if (!VNPhoneRegex.test(newUser.phone)) {
    errs.push("s·ªë ƒëi·ªán tho·∫°i c√≥ ƒë·ªãnh d·∫°ng sai");
  }
  // check password
  if (newUser.password) {
    if (!validator.isStrongPassword(newUser.password, {
      minLength: 8,
      minLowercase: 0,
      minUppercase: 0,
      minNumbers: 0,
      minSymbols: 0,
    })) {
      errs.push("m·∫≠t kh·∫©u c√≥ √≠t nh·∫•t 8 k√≠ t·ª±");
    }
  }
  // check name
  if (!newUser.name || validator.isEmpty(newUser.name)) {
    errs.push("t√™n l√† tr∆∞·ªùng b·∫Øt bu·ªôc!");
  }

  // force role is user
  newUser.role = "user";


  // check email and phone number is register or not
  const oldEmailUser = await User.findOne({ email: newUser.email });
  const oldTelUser = await User.findOne({ phone: newUser.phone });
  if (oldEmailUser) {
    errs.push("email n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√≠!");
  }
  if (oldTelUser) {
    errs.push("s·ªë ƒëi·ªán tho·∫°i n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√≠!");
  }



  // render errors if it has
  if (errs.length) {
    res.status(400).json({ errors: errs });
    return;
  }


  // hash password
  newUser.encode();


  // create new user
  try {
    const result = await newUser.save();

    // create token
    const token = jwt.sign({
      _id: result._id,
      role: result.role,
      name: result.name,
      avatar: result.avatar,
    }, process.env.SECRET_KEY || "DevSecretKey", { expiresIn: '1d' });

    res.header("auth_token", token).cookie('auth_token', token, { expires: new Date(Date.now() + 86400000), }).status(200).json({ "auth_token": token });
  }
  catch (err) {
    res.status(500).json({ errors: ["ƒê√£ c√≥ l·ªói x·∫£y ra vui l√≤ng th·ª≠ l·∫°i sau!"] });

  }

}

// [GET] /api/auth/forgot/:email
AuthController.prototype.forgot = async function (req, res, next) {
  const email = req.params.email;


  if (!process.env.GOOGLEAPI_CLIENT_ID || !process.env.GOOGLEAPI_CLIENT_SECRET || !process.env.GOOGLEAPI_REDIRECT_URI || !process.env.GOOGLEAPI_REFRESS_TOKEN) {
    res.status(500).json({ errors: ["ƒê√£ c√≥ l·ªói x·∫£y ra vui l√≤ng th·ª≠ l·∫°i sau!"] });
    return;
  }

  try {
    let baseURL = process.env.USER_BASE_URL;
    const user = await User.findOne({ email });
    if (!user) {
      res.status(400).json({ errors: ["Email n√†y ch∆∞a ƒëƒÉng k√≠ th√†nh vi√™n!"] });
      return;
    }

    if (user.role === "admin" || user.role === "super admin"){
      baseURL = process.env.HOST_BASE_URL + "auth/"
    }

    // set up google tokens
    const oAuth2token = await new google.auth.OAuth2(process.env.GOOGLEAPI_CLIENT_ID, process.env.GOOGLEAPI_CLIENT_SECRET, process.env.GOOGLEAPI_REDIRECT_URI);
    await oAuth2token.setCredentials({ refresh_token: process.env.GOOGLEAPI_REFRESS_TOKEN });

    // create token
    const token = jwt.sign({
      _id: user._id,
      email: user.email,
    }, process.env.SECRET_KEY || "DevSecretKey", { expiresIn: '15m' });



    // create mail transporter
    const accessToken = await oAuth2token.getAccessToken();
    const transporter = nodemailer.createTransport({
      service: "gmail",
      host: "smtp.ethereal.email",
      auth: {
        type: "OAuth2",
        user: "tusocnau@gmail.com",
        clientId: process.env.GOOGLEAPI_CLIENT_ID,
        clientSecret: process.env.GOOGLEAPI_CLIENT_SECRET,
        refreshToken: process.env.GOOGLEAPI_REFRESS_TOKEN,
        accessToken,

      },
    });

    // create mail option
    const option = {
      from: '"VVVShop üëª" <tusocnau@gmail.com>', // sender address
      to: email, // list of receivers
      subject: "[reset password] VVVShop ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - do not reply", // Subject line
      html: `<p>Ch√†o qu√Ω kh√°ch,</p><p>Ch√∫ng t√¥i ƒë√£ ti·∫øp nh·∫≠n y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u c·ªßa qu√Ω kh√°ch. ƒê√¢y l√† mail t·ª± ƒë·ªông, vui l√≤ng kh√¥ng ph·∫£n h·ªìi l·∫°i email n√†y. ƒê·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, qu√Ω kh√°ch vui l√≤ng truy c·∫≠p t·∫°i <a href="${baseURL || "http://localhost:3001/"}reset/${token}" target="_blank">ƒë√¢y</a>&nbsp;v√† ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin sau ƒë√≥ nh·∫•n x√°c nh·∫≠n.&nbsp;</p><p>L∆∞u √Ω: Qu√Ω kh√°ch ch·ªâ c√≥ 15 ph√∫t k·ªÉ t·ª´ l√∫c email n√†y ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ x√°c nh·∫≠n thay ƒë·ªïi m·∫≠t kh·∫©u. Sau th·ªùi gian n√†y, ƒë∆∞·ªùng d·∫´n tr√™n s·∫Ω kh√¥ng c√≤n t√°c d·ª•ng.</p><p>N·∫øu c√≥ l·ªói x·∫£y ra, h√£y truy c·∫≠p ƒë∆∞·ªùng d·∫´n n√†y:&nbsp;<a href="${baseURL || "http://localhost:3001/"}reset/${token}" target="_blank">${baseURL || "http://localhost:3001/"}reset/${token}</a></p><p>C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i,</p><p>Tr√¢n tr·ªçng,</p><p>VVVShop<br></p><p>----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</p><p><br></p><p>Dear our customer,</p><p>We have recently received your request about resetting your password. This is an automated message, please not to reply directly to this email. In order proceed your password reset, click <a href="${baseURL || "http://localhost:3001/"}reset/${token}" target="_blank">here</a>,&nbsp;fulfill your form and submit it.&nbsp;</p><p>Note: You only have 15 minutes to complete your settings. After that, the url will no longer be available.</p><p>If any errors occur on this link, please access via this url:&nbsp;<a href="${baseURL || "http://localhost:3001/"}reset/${token}" target="_blank" style="font-size: 1rem; text-decoration-line: underline; color: rgb(0, 86, 179); background-color: rgb(255, 255, 255);">${baseURL || "http://localhost:3001/"}reset/${token}</a></p><p>Thanks for using our services.</p><p>Best regards,</p><p>VVVShop</p>`, // html body
    }

    // send mail
    const info = await transporter.sendMail(option);

    // console.log("Message sent: %s", info.messageId);
    // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>

    // Preview only available when sending through an Ethereal account
    // console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));



    res.status(200).json({ message: "Vui l√≤ng ki·ªÉm tra mail ƒë·ªÉ thi·∫øt l·∫≠p l·∫°i m·∫≠t kh·∫©u" });
  } catch (error) {
    res.status(500).json({ errors: ["ƒê√£ c√≥ l·ªói x·∫£y ra vui l√≤ng th·ª≠ l·∫°i sau!"] });
  }
}

// [PATCH] /api/auth/reset/:id
AuthController.prototype.resetPassword = async function (req, res, next) {
  const _id = req.params.id;
  const newPassword = req.body.password;


  if (_id !== req.user._id){
    res.status(401).send({ errors: ["L·ªói x√°c th·ª±c!!"] });
    return;
  }

  // check request has password or not
  if (!newPassword) {
    res.status(400).json({ errors: ["m·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√≠ t·ª±"] });
    return;
  }

  // validate password
  if (!validator.isStrongPassword(newPassword, {
    minLength: 8,
    minLowercase: 0,
    minUppercase: 0,
    minNumbers: 0,
    minSymbols: 0,
  })) {
    res.status(400).json({ errors: ["m·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√≠ t·ª±"] });
    return;
  }


  try {
    const user = await User.findOne({ _id });
    if (!user) {
      res.status(400).json({ errors: ["ƒê√£ c√≥ l·ªói x·∫£y ra vui l√≤ng th·ª≠ l·∫°i sau!"] });
      return;
    }
    user.password = newPassword;
    user.encode();
    const result = await user.save();

    // create token
    const token = jwt.sign({
      _id: result._id,
      role: result.role,
      name: result.name,
      avatar: result.avatar,
    }, process.env.SECRET_KEY || "DevSecretKey", { expiresIn: '1d' });

    res.header("auth_token", token).cookie('auth_token', token, { expires: new Date(Date.now() + 86400000), }).status(200).json({ "auth_token": token });
  } catch (error) {
    res.status(500).json({ errors: ["ƒê√£ c√≥ l·ªói x·∫£y ra vui l√≤ng th·ª≠ l·∫°i sau!"] });
  }
}



module.exports = new AuthController();